# Development commands for flasktrack

# Default command - show available commands
default:
    @just --list

# Install all dependencies and set up the development environment
install:
    @echo "🔧 Setting up virtual environment..."
    uv venv
    @echo "📦 Compiling and installing dependencies with uv..."
    uv pip compile requirements-in.txt -o requirements.txt
    uv pip compile requirements-dev-in.txt -o requirements-dev.txt
    uv pip install -r requirements.txt
    uv pip install -r requirements-dev.txt
    @echo "📁 Creating data directory..."
    mkdir -p data
    @echo "🗄️  Setting up database..."
    uv run flask db init
    uv run flask db migrate -m "Initial migration"
    uv run flask db upgrade
    @echo "✅ Development environment ready!"

# Run the development server
run:
    uv run flask run --debug --host=0.0.0.0 --port=5000

# Run tests
test:
    uv run pytest tests/ -v

# Run tests with coverage
test-cov:
    uv run pytest tests/ --cov=app --cov-report=html --cov-report=term

# Run linting
lint:
    uv run ruff check app/ tests/

# Format code
format:
    uv run ruff format app/ tests/

# Check code formatting
format-check:
    uv run ruff format --check app/ tests/

# Fix all issues (lint + format)
fix:
    uv run ruff check --fix app/ tests/
    uv run ruff format app/ tests/

# Run all checks (format check and lint)
check: format-check lint

# Create a new database migration
migrate message:
    uv run flask db migrate -m "{{message}}"

# Apply database migrations
upgrade:
    uv run flask db upgrade

# Downgrade database by one migration
downgrade:
    uv run flask db downgrade

# Open Flask shell with app context
shell:
    uv run flask shell

# Clean up Python cache files
clean:
    find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
    find . -type f -name "*.pyc" -delete
    find . -type f -name "*.pyo" -delete
    find . -type f -name "*.pyd" -delete
    find . -type f -name ".coverage" -delete
    find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
    find . -type d -name "htmlcov" -exec rm -rf {} + 2>/dev/null || true
    find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
    find . -type d -name ".ruff_cache" -exec rm -rf {} + 2>/dev/null || true

# Reset database (drop and recreate)
reset-db:
    rm -f data/*.db
    uv run flask db upgrade

# Run the app in production mode
prod:
    uv run gunicorn -w 4 -b 0.0.0.0:5000 "app:create_app()"

# Check for security vulnerabilities
security:
    uv run pip-audit

# Update dependencies
update-deps:
    uv pip compile requirements-in.txt -o requirements.txt
    uv pip compile requirements-dev-in.txt -o requirements-dev.txt
    uv pip sync requirements.txt requirements-dev.txt